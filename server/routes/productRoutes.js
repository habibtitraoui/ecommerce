const express = require("express");
const Product = require("../models/product");
const router = express.Router();



// üü¢ ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸÜÿ™ÿ¨ ÿ¨ÿØŸäÿØ
router.post("/add", async (req, res) => {
    try {
        const { name, price, description, promotion, image, category, visible } = req.body;

        if (!name || price === undefined || !description || !image || !category) {
            return res.status(400).json({ error: "‚ùå ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ŸÖÿ∑ŸÑŸàÿ®ÿ©ÿå ÿ®ŸÖÿß ŸÅŸä ÿ∞ŸÑŸÉ ÿßŸÑÿ≥ÿπÿ±!" });
        }

        const allowedCategories =["bocsh", "crown", "Honestpro", "sofeclef", "Tolson" , "Total", "emtop", "ingco"]
        if (!allowedCategories.includes(category)) {
            return res.status(400).json({ error: "‚ùå ŸÅÿ¶ÿ© ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©. ÿßÿ≥ÿ™ÿÆÿØŸÖ: " + allowedCategories.join(", ") });
        }

        const newProduct = new Product({
            name,
            price,
            description,
            promotion: promotion || 0,
            image,
            category,
            visible: visible !== undefined ? visible : true,
            date: new Date()
        });

        await newProduct.save();
        res.status(201).json({ message: "‚úÖ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ™ŸÖÿ™ ÿ•ÿ∂ÿßŸÅÿ™Ÿá ÿ®ŸÜÿ¨ÿßÿ≠!", newProduct });

    } catch (error) {
        console.error("‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨:", error);
        res.status(500).json({ error: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨." });
    }
});

// üü¢ ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
router.get("/all", async (req, res) => {
    try {
        const products = await Product.find();
        res.status(200).json(products);
    } catch (error) {
        console.error("‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™:", error);
        res.status(500).json({ error: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™." });
    }
});
// üü¢ ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÅŸä ŸÅÿ¶ÿ© ŸÖÿπŸäŸÜÿ©
router.get("/category/:category", async (req, res) => {
    try {
        const { category } = req.params;
        const products = await Product.find({ category, visible: true }); // Fetch only visible products
        res.status(200).json(products);
    } catch (error) {
        console.error("‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™:", error);
        res.status(500).json({ error: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™." });
    }
});


// üü¢ ÿ¨ŸÑÿ® ÿπÿØÿØ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑŸÉŸÑŸä
router.get("/total-products", async (req, res) => {
    try {
        const totalProducts = await Product.countDocuments();
        res.status(200).json({ totalProducts });
    } catch (error) {
        console.error("‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿπÿØÿØ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™:", error);
        res.status(500).json({ error: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ¨ŸÑÿ® ÿπÿØÿØ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™." });
    }
});
// üü¢ ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ£ÿπŸÑŸâ ÿ™ŸÇŸäŸäŸÖŸãÿß
router.get("/most-rated", async (req, res) => {
    try {
        const mostRatedProducts = await Product.find()
            .sort({ averageRating: -1 }) // ÿ™ÿ±ÿ™Ÿäÿ® ÿ™ŸÜÿßÿ≤ŸÑŸä ÿ≠ÿ≥ÿ® ÿßŸÑÿ™ŸÇŸäŸäŸÖ
            .limit(5); // ÿ¨ŸÑÿ® ÿ£ŸÅÿ∂ŸÑ 5 ŸÖŸÜÿ™ÿ¨ÿßÿ™
        res.status(200).json(mostRatedProducts);
    } catch (error) {
        console.error("‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ£ÿπŸÑŸâ ÿ™ŸÇŸäŸäŸÖŸãÿß:", error);
        res.status(500).json({ error: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ£ÿπŸÑŸâ ÿ™ŸÇŸäŸäŸÖŸãÿß." });
    }
});
// üü¢ ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÖÿ®ŸäÿπŸãÿß
router.get("/most-sold", async (req, res) => {
    try {
        const mostSoldProducts = await Cart.aggregate([
            { $group: { _id: "$product", count: { $sum: 1 } } }, // ÿ™ÿ¨ŸÖŸäÿπ ÿπÿØÿØ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ŸÑŸÉŸÑ ŸÖŸÜÿ™ÿ¨
            { $sort: { count: -1 } }, // ÿ™ÿ±ÿ™Ÿäÿ® ÿ™ŸÜÿßÿ≤ŸÑŸä ÿ≠ÿ≥ÿ® ÿßŸÑÿπÿØÿØ
            { $limit: 5 }, // ÿ¨ŸÑÿ® ÿ£ŸÅÿ∂ŸÑ 5 ŸÖŸÜÿ™ÿ¨ÿßÿ™
            {
                $lookup: {
                    from: "products", // ÿßÿ≥ŸÖ ŸÖÿ¨ŸÖŸàÿπÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
                    localField: "_id",
                    foreignField: "_id",
                    as: "productDetails",
                },
            },
            { $unwind: "$productDetails" }, // ÿ™ŸÅŸÉŸäŸÉ ŸÖÿµŸÅŸàŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨
            {
                $project: {
                    _id: 0,
                    productId: "$_id",
                    name: "$productDetails.name",
                    image: "$productDetails.image",
                    price: "$productDetails.price",
                    count: 1, // ÿπÿØÿØ ŸÖÿ±ÿßÿ™ ÿßŸÑÿ∑ŸÑÿ®
                },
            },
        ]);
        res.status(200).json(mostSoldProducts);
    } catch (error) {
        console.error("‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÖÿ®ŸäÿπŸãÿß:", error);
        res.status(500).json({ error: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÖÿ®ŸäÿπŸãÿß." });
    }
});

// üü¢ ÿ™ÿ≠ÿØŸäÿ´ ŸÖŸÜÿ™ÿ¨ ŸÖÿπŸäŸÜ
router.put("/:id", async (req, res) => {
    try {
        const { name, price, description, promotion, visible } = req.body;
        const updatedProduct = await Product.findByIdAndUpdate(
            req.params.id,
            { name, price, description, promotion, visible },
            { new: true, runValidators: true }
        );

        if (!updatedProduct) {
            return res.status(404).json({ error: "‚ùå ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ!" });
        }

        res.json({ message: "‚úÖ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´Ÿá!", updatedProduct });
    } catch (error) {
        res.status(500).json({ error: "‚ùå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÜÿ™ÿ¨." });
    }
});


// üü¢ ÿ™ŸÇŸäŸäŸÖ ŸÖŸÜÿ™ÿ¨ ŸÖÿπŸäŸÜ
router.post("/:id/rate", async (req, res) => {
    try {
        const { rating, comment } = req.body;
        const product = await Product.findById(req.params.id);

        if (!product) {
            return res.status(404).json({ message: "‚ùå Product not found" });
        }

        // ‚úÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÇŸäŸäŸÖ ÿ®ÿØŸàŸÜ `user`
        const newRating = { rating, comment };
        product.ratings.push(newRating);

        // ‚úÖ ÿ™ÿ≠ÿØŸäÿ´ ŸÖÿ™Ÿàÿ≥ÿ∑ ÿßŸÑÿ™ŸÇŸäŸäŸÖ
        const totalRatings = product.ratings.length;
        const avgRating = product.ratings.reduce((acc, r) => acc + r.rating, 0) / totalRatings;
        product.averageRating = avgRating.toFixed(1);

        await product.save();

        res.status(201).json({ message: "‚úÖ Rating saved successfully!", product });
    } catch (error) {
        res.status(500).json({ message: "‚ùå Server error", error: error.message });
    }
});


router.put("/:id", async (req, res) => {
    try {
        const { name, price, description, promotion, visible } = req.body;
        const updatedProduct = await Product.findByIdAndUpdate(
            req.params.id,
            { name, price, description, promotion, visible },
            { new: true, runValidators: true }
        );

        if (!updatedProduct) {
            return res.status(404).json({ error: "‚ùå ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ!" });
        }

        console.log("Updated product:", updatedProduct); // ‚úÖ Log the updated product
        res.json({ message: "‚úÖ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´Ÿá!", updatedProduct });
    } catch (error) {
        res.status(500).json({ error: "‚ùå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÜÿ™ÿ¨." });
    }
});




// üî• ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨
router.delete("/:id", async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) {
            return res.status(404).json({ error: "‚ùå ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ!" });
        }

        await Product.findByIdAndDelete(req.params.id);
        res.json({ message: "‚úÖ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ™ŸÖ ÿ≠ÿ∞ŸÅŸá ÿ®ŸÜÿ¨ÿßÿ≠!" });
    } catch (error) {
        res.status(500).json({ error: "‚ùå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨." });
    }
});

module.exports = router;


































router.get("/", async (req, res) => {
    try {
        const products = await Product.find();
        res.json(products);
    } catch (error) {
        res.status(500).json({ message: "‚ùå Server error", error: error.message });
    }
});

// ‚úÖ ÿ•ÿ±ÿ¨ÿßÿπ ŸÖŸÜÿ™ÿ¨ ŸÖÿπŸäŸÜ ÿπÿ®ÿ± ÿßŸÑŸÄ ID
router.get("/:id", async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) {
            return res.status(404).json({ message: "‚ùå Product not found" });
        }
        res.json(product);
    } catch (error) {
        res.status(500).json({ message: "‚ùå Server error", error: error.message });
    }
});

module.exports = router;